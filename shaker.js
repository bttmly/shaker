// Generated by CoffeeScript 1.7.1
(function() {
  var Shaker, animEnd, defaults, extend, getStyle,
    __hasProp = {}.hasOwnProperty;

  extend = function(out) {
    var i, key, _ref;
    out || (out = {});
    i = 1;
    while (i < arguments.length) {
      if (!arguments[i]) {
        continue;
      }
      _ref = arguments[i];
      for (key in _ref) {
        if (!__hasProp.call(_ref, key)) continue;
        out[key] = arguments[i][key];
      }
      i++;
    }
    return out;
  };

  animEnd = (function(d) {
    var eventNames, evt, prop;
    eventNames = {
      'animation': 'animationend',
      '-o-animation': 'oAnimationEnd',
      '-moz-animation': 'animationend',
      '-webkit-animation': 'webkitAnimationEnd'
    };
    for (prop in eventNames) {
      evt = eventNames[prop];
      if (d.style[prop] != null) {
        return evt;
      }
    }
  })(document.createElement("div"));

  defaults = {
    amount: 5,
    shakes: 5,
    className: "shaking-shaking",
    animationName: "shaky-shaky",
    duration: .5,
    direction: "horizontal",
    concave: false,
    flat: false,
    shakeModifier: function(step, totalSteps) {
      return (totalSteps - step) / totalSteps;
    }
  };

  Shaker = (function() {
    function Shaker(opts) {
      var settings;
      settings = extend({}, defaults, opts);
      this.amount = settings.amount, this.shakes = settings.shakes, this.className = settings.className, this.animationName = settings.animationName, this.duration = settings.duration, this.direction = settings.direction, this.concave = settings.concave, this.shakeModifier = settings.shakeModifier, this.flat = settings.flat;
      this.makeRules();
      this.makeSheet();
    }

    Shaker.prototype.makeRules = function() {
      var d, i, o, rotate, str, translate, _i, _ref;
      if (this.direction === "horizontal") {
        this.translate = "translateX";
        this.rotate = "rotateY";
      } else if (this.direction === "vertical") {
        this.translate = "translateY";
        this.rotate = "rotateX";
      }
      str = "@keyframes " + this.animationName + " {\n";
      str += "0, 100% { " + this.translate + "(0), " + this.rotate + "(0) }\n";
      for (i = _i = 1, _ref = this.shakes; 1 <= _ref ? _i < _ref : _i > _ref; i = 1 <= _ref ? ++_i : --_i) {
        str += "" + (i * 100 / this.shakes) + "% {\n";
        if (i % 2 === 1) {
          o = -1;
        } else {
          o = 1;
        }
        if (this.direction === "vertical") {
          d = -1;
        } else {
          d = 1;
        }
        if (this.concave) {
          d = -1 * d;
        }
        rotate = this.flat ? 0 : this.shakeModifier(i, this.shakes) * d * o * 90 * this.amount / 100 + "deg";
        translate = this.shakeModifier(i, this.shakes) * o * this.amount + "%";
        str += "transform: " + this.translate + "(" + translate + ") " + this.rotate + "(" + rotate + ");\n}\n";
      }
      str += "}\n";
      this.keyframesRule = str;
      return this.classRule = "." + this.className + " { animation-name: " + this.animationName + ";\n animation-duration: " + this.duration + "s; }";
    };

    Shaker.prototype.makeSheet = function() {
      this.stylesheet = document.createElement("style");
      this.stylesheet.appendChild(document.createTextNode("" + this.keyframesRule + "\n " + this.classRule));
      document.getElementsByTagName("head")[0].appendChild(this.stylesheet);
      return StyleFix.styleElement(this.stylesheet);
    };

    Shaker.prototype.destroySheet = function() {
      return document.getElementsByTagName("head")[0].removeChild(this.stylesheet);
    };

    Shaker.prototype.shake = function(el, cb) {
      var handler;
      handler = (function() {
        el.classList.remove(this.className);
        if (cb) {
          cb.bind(this)(el);
        }
        return el.removeEventListener(animEnd, handler);
      }).bind(this);
      el.classList.add(this.className);
      return el.addEventListener(animEnd, handler);
    };

    return Shaker;

  })();

  this.Shaker = Shaker;

  getStyle = function(oElm, strCssRule) {
    var strValue;
    strValue = "";
    if (document.defaultView && document.defaultView.getComputedStyle) {
      strValue = document.defaultView.getComputedStyle(oElm, "").getPropertyValue(strCssRule);
    } else if (oElm.currentStyle) {
      strCssRule = strCssRule.replace(/\-(\w)/g, function(strMatch, p1) {
        return p1.toUpperCase();
      });
      strValue = oElm.currentStyle[strCssRule];
    }
    return strValue;
  };

}).call(this);
